{"version":3,"sources":["components/Task.js","lib/redux.js","components/TaskList.js","components/InboxScreen.js","App.js","index.js"],"names":["SListItem","styled","div","SListCheckbox","STextInput","props","state","SPinTask","Task","task","id","title","onArchiveTask","onPinTask","type","defaultChecked","disabled","name","onClick","value","readOnly","actions","taskStateReducer","taskState","action","tasks","map","store","createStore","SListItems","SLoadingList","PureTaskList","loading","events","loadingRow","className","length","tasksInOrder","filter","t","defaultProps","connect","dispatch","archiveTask","pinTask","PureInboxScreen","error","TaskList","App","InboxScreen","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5178adde.chunk.js","sourcesContent":["import styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst SListItem = styled.div`\r\n  box-sizing: border-box;\r\n  background-color: white;\r\n  padding: 16px 20px;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst SListCheckbox = styled.div`\r\n  flex-shrink: 1;\r\n  input {\r\n    display: none;\r\n    &:default ~ span {\r\n      background-color: gray;\r\n    }\r\n  }\r\n  span {\r\n    cursor: pointer;\r\n    display: block;\r\n    width: 16px;\r\n    height: 16px;\r\n    border: 1px solid #dbdbdb;\r\n    border-radius: 6px;\r\n  }\r\n`;\r\n\r\nconst STextInput = styled.div`\r\n  flex: 1;\r\n  padding: 0 12px;\r\n  input {\r\n    display: block;\r\n    width: 100%;\r\n    padding: 0;\r\n    border: 0;\r\n    border-radius: 0;\r\n\r\n    font-size: 16px;\r\n\r\n    color: ${(props) =>\r\n      props.state === 'TASK_ARCHIVED' ? '#adadad' : '#333333'};\r\n  }\r\n`;\r\n\r\nconst SPinTask = styled.div`\r\n  cursor: pointer;\r\n  width: 16px;\r\n  height: 16px;\r\n  border-radius: 50%;\r\n\r\n  background-color: ${(props) =>\r\n    props.state === 'TASK_PINNED' ? '#fff92d' : '#dbdbdb'};\r\n`;\r\n\r\nconst Task = ({ task: { id, title, state }, onArchiveTask, onPinTask }) => (\r\n  <SListItem>\r\n    <SListCheckbox>\r\n      <input\r\n        type=\"checkbox\"\r\n        defaultChecked={state === 'TASK_ARCHIVED'}\r\n        disabled={true}\r\n        name=\"checked\"\r\n      />\r\n      <span onClick={() => onArchiveTask(id)} />\r\n    </SListCheckbox>\r\n    <STextInput state={state}>\r\n      <input type=\"text\" value={title} readOnly={true} />\r\n    </STextInput>\r\n    {state !== 'TASK_ARCHIVED' && (\r\n      <SPinTask state={state} onClick={() => onPinTask(id)} />\r\n    )}\r\n  </SListItem>\r\n);\r\n\r\nTask.propTypes = {\r\n  /** Composition of the task */\r\n  task: PropTypes.shape({\r\n    /** Id of the task */\r\n    id: PropTypes.string.isRequired,\r\n    /** Title of the task */\r\n    title: PropTypes.string.isRequired,\r\n    /** Current state of the task */\r\n    state: PropTypes.string.isRequired,\r\n  }),\r\n  /** Event to change the task to archived */\r\n  onArchiveTask: PropTypes.func,\r\n  /** Event to change the task to pinned */\r\n  onPinTask: PropTypes.func,\r\n};\r\n\r\nexport default Task;\r\n","import { createStore } from 'redux';\r\n\r\nexport const actions = {\r\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\r\n  PIN_TASK: 'PIN_TASK',\r\n};\r\n\r\nexport const archiveTask = (id) => ({ type: actions.ARCHIVE_TASK, id });\r\nexport const pinTask = (id) => ({ type: actions.PIN_TASK, id });\r\n\r\nconst taskStateReducer = (taskState) => (state, action) => ({\r\n  ...state,\r\n  tasks: state.tasks.map((task) =>\r\n    task.id === action.id ? { ...task, state: taskState } : task,\r\n  ),\r\n});\r\n\r\nexport const reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case actions.ARCHIVE_TASK:\r\n      return taskStateReducer('TASK_ARCHIVED')(state, action);\r\n    case actions.PIN_TASK:\r\n      return taskStateReducer('TASK_PINNED')(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst defaultTasks = [\r\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\r\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\r\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\r\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\r\n];\r\n\r\nexport const store = createStore(reducer, { tasks: defaultTasks });\r\n","import styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport Task from './Task';\r\nimport { connect } from 'react-redux';\r\nimport { archiveTask, pinTask } from '../lib/redux';\r\n\r\nconst SListItems = styled.div`\r\n  background-color: white;\r\n  min-height: 280px;\r\n`;\r\n\r\nconst SLoadingList = styled.div`\r\n  padding: 16px 20px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  animation: blinkAnim 0.7s infinite alternate;\r\n\r\n  .glow_checkbox,\r\n  .glow_text span {\r\n    background-color: #dbdbdb;\r\n    color: #dbdbdb;\r\n  }\r\n  .glow_checkbox {\r\n    margin-right: 12px;\r\n\r\n    width: 16px;\r\n    height: 16px;\r\n  }\r\n  .glow_text {\r\n    flex: 1;\r\n    font-size: 16px;\r\n    line-height: 1;\r\n    span {\r\n      margin-right: 8px;\r\n    }\r\n  }\r\n\r\n  @keyframes blinkAnim {\r\n    from {\r\n      opacity: 0.4;\r\n    }\r\n    to {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const PureTaskList = ({ loading, tasks, onPinTask, onArchiveTask }) => {\r\n  const events = {\r\n    onPinTask,\r\n    onArchiveTask,\r\n  };\r\n\r\n  const loadingRow = (\r\n    <SLoadingList>\r\n      <span className=\"glow_checkbox\"></span>\r\n      <span className=\"glow_text\">\r\n        <span>Loading</span>\r\n        <span>cool</span>\r\n        <span>state</span>\r\n      </span>\r\n    </SLoadingList>\r\n  );\r\n\r\n  if (loading)\r\n    return (\r\n      <SListItems>\r\n        {loadingRow}\r\n        {loadingRow}\r\n        {loadingRow}\r\n        {loadingRow}\r\n      </SListItems>\r\n    );\r\n\r\n  if (tasks.length === 0) return <SListItems>Empty</SListItems>;\r\n\r\n  const tasksInOrder = [\r\n    ...tasks.filter((t) => t.state === 'TASK_PINNED'),\r\n    ...tasks.filter((t) => t.state !== 'TASK_PINNED'),\r\n  ];\r\n\r\n  return (\r\n    <SListItems>\r\n      {tasksInOrder.map((task) => (\r\n        <Task key={task.id} task={task} {...events} />\r\n      ))}\r\n    </SListItems>\r\n  );\r\n};\r\n\r\nPureTaskList.propTypes = {\r\n  loading: PropTypes.bool,\r\n  tasks: PropTypes.arrayOf(Task.propTypes.task).isRequired,\r\n  onPinTask: PropTypes.func.isRequired,\r\n  onArchiveTask: PropTypes.func.isRequired,\r\n};\r\n\r\nPureTaskList.defaultProps = {\r\n  loading: false,\r\n};\r\n\r\nconst connectMapState = ({ tasks }) => ({\r\n  tasks,\r\n  //   tasks: tasks.filter(\r\n  //     (t) => t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED',\r\n  //   ),\r\n});\r\n\r\nconst connectDispatch = (dispatch) => ({\r\n  onArchiveTask: (id) => dispatch(archiveTask(id)),\r\n  onPinTask: (id) => dispatch(pinTask(id)),\r\n});\r\n\r\nexport default connect(connectMapState, connectDispatch)(PureTaskList);\r\n","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport TaskList from './TaskList';\r\n\r\nexport const PureInboxScreen = ({ error }) => {\r\n  if (error) return <div>Error!!</div>;\r\n\r\n  return (\r\n    <div>\r\n      <h1>Task Box</h1>\r\n      <TaskList />\r\n    </div>\r\n  );\r\n};\r\n\r\nPureInboxScreen.propTypes = {\r\n  /** The error message */\r\n  error: PropTypes.string,\r\n};\r\n\r\nPureInboxScreen.defaultProps = {\r\n  error: null,\r\n};\r\n\r\nexport default connect(({ error }) => ({ error }))(PureInboxScreen);\r\n","import { Provider } from 'react-redux';\nimport InboxScreen from './components/InboxScreen';\nimport { store } from './lib/redux';\nimport './stroybook_index.css';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <InboxScreen />\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}